{"version":3,"file":"transform.min.js","sources":["../src/matrix.ts","../src/transform.ts"],"sourcesContent":["/*\n * @Author: Huangjs\n * @Date: 2023-02-13 15:22:58\n * @LastEditors: Huangjs\n * @LastEditTime: 2023-06-14 16:40:44\n * @Description: ******\n */\n\nconst DEG_TO_RAD = Math.PI / 180;\n\nconst Matrix = {\n  // 将矩阵 lhm 与矩阵 rhm 相乘，然后保存到矩阵 rm 中\n  multiply: function multiply(rm: Float32Array, lhm: Float32Array, rhm: Float32Array) {\n    const a11 = lhm[0];\n    const a12 = lhm[4];\n    const a13 = lhm[8];\n    const a14 = lhm[12];\n    const a21 = lhm[1];\n    const a22 = lhm[5];\n    const a23 = lhm[9];\n    const a24 = lhm[13];\n    const a31 = lhm[2];\n    const a32 = lhm[6];\n    const a33 = lhm[10];\n    const a34 = lhm[14];\n    const a41 = lhm[3];\n    const a42 = lhm[7];\n    const a43 = lhm[11];\n    const a44 = lhm[15];\n    const b11 = rhm[0];\n    const b12 = rhm[1];\n    const b13 = rhm[2];\n    const b14 = rhm[3];\n    const b21 = rhm[4];\n    const b22 = rhm[5];\n    const b23 = rhm[6];\n    const b24 = rhm[7];\n    const b31 = rhm[8];\n    const b32 = rhm[9];\n    const b33 = rhm[10];\n    const b34 = rhm[11];\n    const b41 = rhm[12];\n    const b42 = rhm[13];\n    const b43 = rhm[14];\n    const b44 = rhm[15];\n    rm[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    rm[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    rm[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    rm[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n    rm[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    rm[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    rm[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    rm[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n    rm[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    rm[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    rm[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    rm[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n    rm[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    rm[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    rm[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    rm[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n  },\n  // 将矩阵 m 设置为初始矩阵\n  identity: function identity(m: Float32Array) {\n    for (let i = 0; i < 16; i++) {\n      m[i] = 0;\n    }\n    for (let i = 0; i < 16; i += 5) {\n      m[i] = 1;\n    }\n  },\n  // 将矩阵 m 按照 x, y, z 平移\n  translate: function translate(m: Float32Array, x: number, y: number, z: number) {\n    for (let i = 0; i < 4; i++) {\n      m[12 + i] += m[i] * x + m[4 + i] * y + m[8 + i] * z;\n    }\n  },\n  // 将矩阵 m 按照 x, y, z 缩放\n  scale: function scale(m: Float32Array, x: number, y: number, z: number) {\n    for (let i = 0; i < 4; i++) {\n      m[i] *= x;\n      m[4 + i] *= y;\n      m[8 + i] *= z;\n    }\n  },\n  // 将矩阵 m 围绕 x, y, z 旋转a度\n  rotate: function rotate(m: Float32Array, a: number, x: number, y: number, z: number) {\n    const rm = new Float32Array(16);\n    rm[3] = 0;\n    rm[7] = 0;\n    rm[11] = 0;\n    rm[12] = 0;\n    rm[13] = 0;\n    rm[14] = 0;\n    rm[15] = 1;\n    const ra = a * DEG_TO_RAD;\n    const s = Math.sin(ra);\n    const c = Math.cos(ra);\n    if (x === 1 && y === 0 && z === 0) {\n      // x轴\n      rm[5] = c;\n      rm[10] = c;\n      rm[6] = s;\n      rm[9] = -s;\n      rm[1] = 0;\n      rm[2] = 0;\n      rm[4] = 0;\n      rm[8] = 0;\n      rm[0] = 1;\n    } else if (x === 0 && y === 0 && z === 0) {\n      // y轴\n      rm[0] = c;\n      rm[10] = c;\n      rm[8] = s;\n      rm[2] = -s;\n      rm[1] = 0;\n      rm[4] = 0;\n      rm[6] = 0;\n      rm[9] = 0;\n      rm[5] = 1;\n    } else if (x === 0 && y === 0 && z === 1) {\n      // z轴\n      rm[0] = c;\n      rm[5] = c;\n      rm[1] = s;\n      rm[4] = -s;\n      rm[2] = 0;\n      rm[6] = 0;\n      rm[8] = 0;\n      rm[9] = 0;\n      rm[10] = 1;\n    } else {\n      const len = Math.sqrt(x * x + y * y + z * z);\n      if (len !== 1) {\n        const recipLen = 1 / len;\n        x *= recipLen;\n        y *= recipLen;\n        z *= recipLen;\n      }\n      const nc = 1 - c;\n      const xy = x * y;\n      const yz = y * z;\n      const zx = z * x;\n      const xs = x * s;\n      const ys = y * s;\n      const zs = z * s;\n      rm[0] = x * x * nc + c;\n      rm[4] = xy * nc - zs;\n      rm[8] = zx * nc + ys;\n      rm[1] = xy * nc + zs;\n      rm[5] = y * y * nc + c;\n      rm[9] = yz * nc - xs;\n      rm[2] = zx * nc - ys;\n      rm[6] = yz * nc + xs;\n      rm[10] = z * z * nc + c;\n    }\n    Matrix.multiply(m, m, rm);\n  },\n  // 将矩阵 m 按照欧拉角 xa, ya, za 旋转\n  rotateEuler: function rotateEuler(m: Float32Array, xa: number, ya: number, za: number) {\n    const rm = new Float32Array(16);\n    const xra = xa * DEG_TO_RAD;\n    const yra = ya * DEG_TO_RAD;\n    const zra = za * DEG_TO_RAD;\n    const cx = Math.cos(xra);\n    const sx = Math.sin(xra);\n    const cy = Math.cos(yra);\n    const sy = Math.sin(yra);\n    const cz = Math.cos(zra);\n    const sz = Math.sin(zra);\n    const cxsy = cx * sy;\n    const sxsy = sx * sy;\n    rm[0] = cy * cz;\n    rm[1] = -cy * sz;\n    rm[2] = sy;\n    rm[3] = 0;\n    rm[4] = cxsy * cz + cx * sz;\n    rm[5] = -cxsy * sz + cx * cz;\n    rm[6] = -sx * cy;\n    rm[7] = 0;\n    rm[8] = -sxsy * cz + sx * sz;\n    rm[9] = sxsy * sz + sx * cz;\n    rm[10] = cx * cy;\n    rm[11] = 0;\n    rm[12] = 0;\n    rm[13] = 0;\n    rm[14] = 0;\n    rm[15] = 1;\n    Matrix.multiply(m, m, rm);\n  },\n  // 将矩阵 m 进行perspective变换\n  perspective: function perspective(\n    m: Float32Array,\n    fovy: number,\n    aspect: number,\n    zNear: number,\n    zFar: number,\n  ) {\n    const f = 1 / Math.tan(fovy * (Math.PI / 360.0));\n    const rangeReciprocal = 1 / (zNear - zFar);\n    m[0] = f / aspect;\n    m[1] = 0;\n    m[2] = 0;\n    m[3] = 0;\n    m[4] = 0;\n    m[5] = f;\n    m[6] = 0;\n    m[7] = 0;\n    m[8] = 0;\n    m[9] = 0;\n    m[10] = (zFar + zNear) * rangeReciprocal;\n    m[11] = -1;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 2 * zFar * zNear * rangeReciprocal;\n    m[15] = 0;\n  },\n};\n\nexport default Matrix;\n","/*\n * @Author: Huangjs\n * @Date: 2023-04-27 18:24:36\n * @LastEditors: Huangjs\n * @LastEditTime: 2023-09-12 16:44:49\n * @Description: ******\n */\n\nimport Matrix from './matrix';\n\ntype Raw = {\n  a?: number;\n  k?: number;\n  x?: number;\n  y?: number;\n};\n\nexport default class Transform {\n  a?: number;\n  k?: number;\n  x?: number;\n  y?: number;\n\n  constructor(t: Raw = {}) {\n    if (typeof t.a === 'number') {\n      this.a = t.a;\n    }\n    if (typeof t.k === 'number') {\n      this.k = t.k;\n    }\n    if (typeof t.x === 'number') {\n      this.x = t.x;\n    }\n    if (typeof t.y === 'number') {\n      this.y = t.y;\n    }\n  }\n  static identity() {\n    return new Transform({ a: 0, k: 1, x: 0, y: 0 });\n  }\n  toRaw() {\n    const raw: Raw = {};\n    if (typeof this.a === 'number') {\n      raw.a = this.a;\n    }\n    if (typeof this.k === 'number') {\n      raw.k = this.k;\n    }\n    if (typeof this.x === 'number') {\n      raw.x = this.x;\n    }\n    if (typeof this.y === 'number') {\n      raw.y = this.y;\n    }\n    return raw;\n  }\n  toString() {\n    const { a = 0, k = 1, x = 0, y = 0 } = this;\n    const matrix = new Float32Array(16);\n    Matrix.identity(matrix);\n    Matrix.translate(matrix, x, y, 0);\n    Matrix.scale(matrix, k, k, k);\n    // 这里使用负值，实际matrix3d里负值为顺时针\n    Matrix.rotate(matrix, -a, 0, 0, 1);\n    return `matrix3d(${Array.prototype.slice.call(matrix).join(',')})`;\n  }\n}\n"],"names":["DEG_TO_RAD","Math","PI","Matrix","multiply","rm","lhm","rhm","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","identity","m","i","translate","x","y","z","scale","rotate","a","Float32Array","ra","s","sin","c","cos","len","sqrt","recipLen","nc","xy","yz","zx","xs","ys","zs","rotateEuler","xa","ya","za","xra","yra","zra","cx","sx","cy","sy","cz","sz","cxsy","sxsy","perspective","fovy","aspect","zNear","zFar","f","tan","rangeReciprocal","Transform","constructor","t","this","k","toRaw","raw","toString","matrix","Array","prototype","slice","call","join"],"mappings":"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"}